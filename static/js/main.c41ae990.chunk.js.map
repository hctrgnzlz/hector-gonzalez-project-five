{"version":3,"sources":["components/Header.js","firebase.js","components/DreamForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","img","axios","url","method","responseType","params","client_id","count","query","then","response","data","urls","regular","setState","console","log","className","src","this","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DreamForm","handleChange","event","target","name","value","validate","inputError","titleInput","length","dreamInput","handleClick","preventDefault","dbRef","database","ref","inputObj","title","desc","push","deleteDream","dreamId","child","remove","dreams","on","newState","val","key","content","id","onChange","type","onClick","map","dream","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c41ae990.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      img: [],\n    };\n  }\n\n  componentDidMount() {\n    axios({\n      url: \"https://api.unsplash.com/photos/random\",\n      method: \"GET\",\n      responseType: \"JSON\",\n      params: {\n        client_id: \"cDOViFNyBQD9qXEF626qEz25DTg6KOHx8b_2oq7mPdw\",\n        count: \"1\",\n        query: \"galaxy\",\n      },\n    }).then((response) => {\n      let img = response.data[0].urls.regular;\n      this.setState({\n        img,\n      });\n      console.log(response);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"background\">\n        <img src={this.state.img} />\n        <h1 className=\"header-title\">Lucid</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCgy_W3eD6pW_EGjavWGXG5Ty28LfeKaHA\",\n  authDomain: \"dream-journal-779f3.firebaseapp.com\",\n  databaseURL: \"https://dream-journal-779f3.firebaseio.com\",\n  projectId: \"dream-journal-779f3\",\n  storageBucket: \"dream-journal-779f3.appspot.com\",\n  messagingSenderId: \"887214919631\",\n  appId: \"1:887214919631:web:f37c599e097702249accba\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport firebase from \"../firebase.js\";\n\nclass DreamForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dreams: [],\n      titleInput: \"\",\n      dreamInput: \"\",\n      inputError: \"\",\n    };\n  }\n\n  componentDidMount() {\n    //create a variable to store a reference to our database\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      //event listener that is returning a snapshot of what is in our database\n      const newState = [];\n      //take object from firebase and push to an array\n      //create a variable  that we will set newState to update dreams\n      const data = response.val();\n\n      for (let key in data) {\n        newState.push({\n          content: data[key],\n          id: key,\n        });\n      }\n      this.setState({\n        dreams: newState,\n      });\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      // userInput: event.target.value,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  validate = () => {\n    let inputError = \"\";\n\n    if (\n      this.state.titleInput.length === 0 ||\n      this.state.dreamInput.length === 0\n    ) {\n      inputError = \"Input fields cannot be blank\";\n    }\n\n    if (inputError) {\n      this.setState({ inputError });\n      return false;\n    }\n\n    return true;\n  };\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const isValid = this.validate();\n    if (isValid) {\n      this.setState({\n        titleInput: \"\",\n        dreamInput: \"\",\n        inputError: \"\",\n      });\n    }\n    //tell react to submit inputs\n    const dbRef = firebase.database().ref();\n    //reference to the database\n    const inputObj = {\n      title: this.state.titleInput,\n      desc: this.state.dreamInput,\n    };\n    //create object to push both inputs\n\n    dbRef.push(inputObj);\n\n    this.setState({\n      titleInput: \"\",\n      dreamInput: \"\",\n      inputError: \"\",\n    });\n    //after user adds information, clear inputs\n  };\n\n  deleteDream = (dreamId) => {\n    //tell fb to delete a book based on its unique id\n    const dbRef = firebase.database().ref();\n    //remove the specific node in fb based on its unique id\n\n    dbRef.child(dreamId).remove();\n    //find data that lives in dreamID and remove it\n  };\n\n  render() {\n    return (\n      <div className=\"dreamDiv\">\n        <input\n          value={this.state.titleInput}\n          onChange={this.handleChange}\n          name=\"titleInput\"\n          type=\"text\"\n        />\n        <br />\n        <input\n          value={this.state.dreamInput}\n          onChange={this.handleChange}\n          name=\"dreamInput\"\n          type=\"text\"\n        />\n\n        <br />\n        <button onClick={this.handleClick}>Add Dream</button>\n        {/* <p className=\"errorMessage\">{inputError}</p> */}\n\n        <ul>\n          {this.state.dreams.map((dream) => {\n            return (\n              <li key={dream.id}>\n                <p>{dream.content.title}</p>\n                <p>{dream.content.desc}</p>\n                {/* target inputs in object by name */}\n                <button onClick={() => this.deleteDream(dream.id)}>\n                  Delete\n                </button>\n                {/* create button to delete dream by id */}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default DreamForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport DreamForm from \"./components/DreamForm.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"dreamDiv\">\n        <Header />\n        <DreamForm />\n\n        <footer>\n          <p>hctr</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}